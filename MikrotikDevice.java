
public class MikrotikDevice {
    public String header;
    public String softwareId;
    public String interfaceName;
    public String version;
    public String boardName;
    public String platform;
    public String identity;
    public String macAddress;
    public String uptime;
    public String ipv4;
    public int unpack;
    public int sequence;

    private MikrotikDevice() {

    }

    private static int unsigned(byte i) {
        return  i < 0 ? i + 256 : i;
    }

    public static MikrotikDevice parse(byte[] buffer, int bufferLen) {
        int index = 0;
        MikrotikDevice md = new MikrotikDevice();

        md.header = Converter.byteArrayToString(buffer, index, 2);
        index += 2;

        DataParser binaryParser = DataParserFactory.getParser(DataParserType.BINARY_PARSER);
        md.sequence = binaryParser.parseInt(buffer, index, 2);
        index += 2;

        while (index < bufferLen) {
            int tag = binaryParser.parseInt(buffer, index, 2);
            index += 2;

            int len = binaryParser.parseInt(buffer, index, 2);
            index += 2;

            if (tag == 1) {
                md.macAddress = String.format("%02X:%02X:%02X:%02X:%02X:%02X", buffer[index], buffer[index + 1],
                        buffer[index + 2], buffer[index + 3], buffer[index + 4], buffer[index + 5]);
            } else if (tag == 5) {
                md.identity = new String(buffer, index, len);
            } else if (tag == 7) {
                md.version = new String(buffer, index, len);
            } else if (tag == 8) {
                md.platform = new String(buffer, index, len);
            } else if (tag == 10) {
                long time = binaryParser.parseLong(buffer, index, len);
                md.uptime = String.format("%d -> %dd %02d:%02d:%02d",
                        time, time / 86400, (time % 86400) / 3600, ((time % 86400) % 3600) / 60, ((time % 86400) % 3600) % 60);
            } else if (tag == 11) {
                md.softwareId = new String(buffer, index, len);
            } else if (tag == 12) {
                md.boardName = new String(buffer, index, len);
            } else if (tag == 14) {
                md.unpack = binaryParser.parseInt(buffer, index, len);
            } else if (tag == 16) {
                md.interfaceName = new String(buffer, index, len);
            } else if (tag == 17) {
                md.ipv4 = String.format("%d.%d.%d.%d", unsigned(buffer[index]), unsigned(buffer[index + 1]),
                        unsigned(buffer[index + 2]), unsigned(buffer[index + 3]));
            }

            index += len;
        }

        return md;
    }

    @Override
    public String toString() {
        return Dumper.dumpClass(this);
    }
}
