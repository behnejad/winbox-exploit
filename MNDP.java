
import java.io.IOException;
import java.net.*;
import java.util.HashSet;

public class MNDP {
    private static final int MNDPPort = 5678;

    public interface DiscoveryCallback {
        void onDeviceDiscover(MikrotikDevice device);
        void onFailure(Exception e);
    }

    private DiscoveryCallback callback;
    private HashSet<String> macSet;
    private boolean loop;

    public MNDP(DiscoveryCallback callback) {
        this.callback = callback;
        macSet = new HashSet<>();
        loop = false;
    }

    public void start() {
        try {
            DatagramSocket socket = new DatagramSocket(MNDPPort);
            socket.setReuseAddress(true);
            socket.setBroadcast(true);
            InetSocketAddress address = new InetSocketAddress("255.255.255.255", MNDPPort);
            socket.send(new DatagramPacket(new byte[4], 0, 4, address));
            byte[] buf = new byte[1024];
            DatagramPacket packet = new DatagramPacket(buf, buf.length);

            loop = true;
            while (loop) {
                socket.receive(packet);
                MikrotikDevice device = MikrotikDevice.parse(buf, packet.getLength());
                if (!macSet.contains(device.macAddress)) {
                    macSet.add(device.macAddress);
                    callback.onDeviceDiscover(device);
                }
            }
        } catch (IOException e) {
            callback.onFailure(e);
        }
    }

    public void stop() {
        loop = false;
    }

    public static void main(String[] args) {
        MNDP mndp = new MNDP(new DiscoveryCallback() {
            @Override
            public void onDeviceDiscover(MikrotikDevice device) {
                System.out.println(device);
            }

            @Override
            public void onFailure(Exception e) {
                e.printStackTrace();
            }
        });
        mndp.start();
    }
}
